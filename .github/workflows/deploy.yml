name: Deploy to EC2  # 워크플로 이름

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때 이 워크플로가 실행됩니다.

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 사용할 OS 환경입니다.

    steps:
    - name: Checkout code  # 1단계: 코드 체크아웃
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx  # 2단계: Docker 빌드 환경 설정
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub  # 3단계: Docker Hub에 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image  # 4단계: Docker 이미지 빌드 및 푸시
      run: |
        # Docker Hub의 사용자 이름과 이미지 이름으로 설정
        docker build -t ansb19/anywhere:${{ github.sha }} .  # Docker 이미지 빌드
        docker push ansb19/anywhere:${{ github.sha }}  # Docker Hub에 이미지 푸시

    - name: Set up SSH key  # SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add known hosts  # EC2 서버의 호스트 키를 추가하여 신뢰할 수 있도록 설정
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2  # 5단계: EC2에 배포
      run: |
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p 22 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        docker pull ansb19/anywhere:${{ github.sha }}  # Docker Hub에서 최신 이미지 풀
        docker stop anywhere || true  # 기존 컨테이너 중지
        docker rm anywhere || true  # 기존 컨테이너 삭제
        docker run -d --name anywhere -p 3000:80 ansb19/anywhere:${{ github.sha }}  # 새 컨테이너 실행
        EOF
