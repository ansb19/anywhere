name: CI/CD Pipeline to AWS EC2 with Docker

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때 워크플로우가 실행됩니다.

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. .env 파일 생성
      - name: Create .env file
        run: |
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo NODE_NETWORK=${{ secrets.NODE_NETWORK }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo FRONT_END_API=${{ secrets.FRONT_END_API }} >> .env

          echo DB_TYPE=${{ secrets.DB_TYPE }} >> .env
          echo DB_HOST_NAME=${{ secrets.DB_HOST_NAME }} >> .env
          echo DB_USER_NAME=${{ secrets.DB_USER_NAME }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_DATABASE=${{ secrets.DB_DATABASE }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env

          echo KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }} >> .env
          echo KAKAO_JAVASCRIPT_KEY=${{ secrets.KAKAO_JAVASCRIPT_KEY }} >> .env
          echo KAKAO_REDIRECT_URI_LOCAL=${{ secrets.KAKAO_REDIRECT_URI_LOCAL }} >> .env
          echo KAKAO_REDIRECT_URI_REMOTE=${{ secrets.KAKAO_REDIRECT_URI_REMOTE }} >> .env
          echo KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} >> .env
          
          echo KAKAO_TEST_REST_API_KEY=${{ secrets.KAKAO_TEST_REST_API_KEY }} >> .env
          echo KAKAO_TEST_JAVASCRIPT_KEY=${{ secrets.KAKAO_TEST_JAVASCRIPT_KEY }} >> .env
          echo KAKAO_TEST_REDIRECT_URI_LOCAL=${{ secrets.KAKAO_TEST_REDIRECT_URI_LOCAL }} >> .env
          echo KAKAO_TEST_REDIRECT_URI_REMOTE=${{ secrets.KAKAO_TEST_REDIRECT_URI_REMOTE }} >> .env
          echo KAKAO_TEST_CLIENT_SECRET=${{ secrets.KAKAO_TEST_CLIENT_SECRET }} >> .env

          echo EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }} >> .env
          echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
          echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
          echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env
          echo EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} >> .env
          
          echo SMS_API_KEY=${{ secrets.SMS_API_KEY }} >> .env
          echo SMS_API_SECRET=${{ secrets.SMS_API_SECRET }} >> .env
          echo SENDER_PHONE=${{ secrets.SENDER_PHONE }} >> .env

          echo REDIS_REMOTE_URL=${{ secrets.REDIS_REMOTE_URL }} >> .env
          echo REDIS_LOCAL_URL=${{ secrets.REDIS_LOCAL_URL }} >> .env 

          echo SALT_ROUNDS=${{ secrets.SALT_ROUNDS }} >> .env 

          echo SESSION_SECRET=${{ secrets.SESSION_SECRET }} >> .env 
          
      # 2.2 .env 파일 전송
      - name: Upload .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: .env
          target: /home/ec2-user/.env
          

      # 3. Docker 로그인 (Docker Hub 사용 시)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
          docker build -t ansb19/anywhere:latest .
          docker push ansb19/anywhere:latest
          
      # 5. docker-compose.yml 파일 전송
      - name: Upload docker-compose.yml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./docker-compose.yml
          target: /home/ec2-user/docker-compose.yml

      # 5. AWS EC2에서 Docker Compose  docker-compose.yml로 디렉토리도 생성됨..
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/docker-compose.yml/

            docker ps -q --filter "name=anywhere" | grep -q . && docker stop anywhere && \
            docker rm anywhere || true

            docker network prune -f || true
            docker volume prune -f || true

            docker-compose down || true
            docker-compose pull
            docker-compose up -d
